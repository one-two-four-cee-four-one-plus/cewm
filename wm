root="$(lsw -r)"
W="$(wattr w $root)"
H="$(wattr h $root)"

wm="/dev/shm/wmutils"; rm -rf $wm; mkdir $wm
wa="$wm/wa"; mkdir $wa
ws="$wm/ws"; mkdir $ws

for num in 1 2 3 4
do
    touch $ws/$num
done

cws="1"

_rot() { fst=$1; shift; echo $@ $fst; }
rot() {
    num="$1"
    order="$(cat $ws/$num)"
    next="$(_rot $order)"
    echo $next > $ws/$num
}

register() {
    mkdir $wa/$2
    mkdir $wa/$2/WM_NAME
    touch $wa/$2/WM_NAME/"$(atomx WM_NAME $2)"
    mkdir $wa/$2/WM_CLASS
    touch $wa/$2/WM_CLASS/"$(atomx WM_CLASS $2)"
    [[ -s $ws/$cws ]]
    if [[ $? -eq 1 ]]; then
        echo "$2" > $ws/$1
        wtp 0 0 $W $H $2
    else
        sed -i -e "s/\$/ $2/" $ws/$1
    fi
    wtf $2
}

unregister() {
    num="$1"
    [ -z "$num" ]
    if [ $? -ne 0 ]; then
        rm -rf /dev/shm/wmutils/wa/$num
        count="$(cat $ws/$cws | wc -w)"
        [[ $count -eq 1 ]]
        if [ $? -ne 0 ]; then
            sed -i -e "s/$num//" $ws/$cws
            sed -i -e "s/ //g" $ws/$cws
        else
            sed -i -e "s/$num//" $ws/$cws
        fi
    fi
}


fromws_tows() {
    prev="$1"
    next="$2"
    [[ $prev -ne $next ]]
    if [[ $? -ne 0 ]]; then
        for wid in $(sed -e 's/ /  /g' $ws/$prev)
        do
            mapw -u $wid
        done

        for wid in $(sed -e 's/ /  /g' $ws/$next)
        do
            mapw -m $wid
        done 
    fi
}

onwew() {
    wattr o $1
    if [[ $? -ne 0 ]]; then
        case $1 in
            CREATE)
                name="$(atomx WM_NAME $2)"
                class="$(atomx WM_CLASS $2)"
                [[ $name == "" ]] && [[ $class == "" ]]
                if [[ $? -ne 0 ]]; then
                    register $cws $2
                else
                    ignw -s $2
                fi
            ;;
            MAP)
                echo 1
            ;;
            UNMAP)
                wtf "$(cut -d' ' -f 1 $ws/$cws)"
            ;;
            DESTROY)
                unregister "$(pfw)"
                wtf "$(cut -d' ' -f 1 $ws/$cws)"
            ;;
        esac
        echo $1 > $wa/$2/last_event
    fi
}

onsxhkd() {
    case $1 in
        cycle)
        rot $cws
        ;;
        kill)
        killw -p "$(pfw)"
        wtf "$(cut -d' ' -f 1 $ws/$cws)"
        ;;
        jump)
        fromws_tows $cws $2
        cws=$2
        ;;
        maximize)
        wtp 0 0 $W $H $2
        ;;
    esac
}

nc -k -l -p 2000 | \
while IFS=: read type arguments; do
    case $type in
        wew) onwew $arguments ;;
        sxhkd) onsxhkd $arguments ;;
    esac
done
